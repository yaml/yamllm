#!/usr/bin/env ys-0


#------------------------------------------------------------------------------
# Initialization and sanity checks
#------------------------------------------------------------------------------

ys-min-version =: 63

when-not ENV.YAMLLM_ROOT:
  die: "YAMLLM_ROOT not set. Try: 'source bashrc'."

when (ys-min-version > VERSION.split(/\./).last().num()):
  die: "ys version 0.1.$ys-min-version or greater required"

api-key =: ENV.YAMLLM_GROQ_API_KEY ||
  die("\nPlease 'export YAMLLM_GROQ_API_KEY=<your-groq-api-key'
       \nGet one here:\ https://console.groq.com/keys")

api-model =: ENV.YAMLLM_API_MODEL ||
  'llama3-70b-8192'


#------------------------------------------------------------------------------
# Main script logic
#------------------------------------------------------------------------------
defn main(query=nil):
  when query.in(['--help' '-h']): usage()

  if query:
    then:
      say: "Q: $query"
      run: query
    else:
      say: "(Use ctl-d or 'exit' to quit)"
      while true:
        run: get-query()

defn usage():
  file =: FILE.replace(rx('.*/(.*)') "$1")
  say: |
    $ $file          - Prompt for query
    $ $file <query>  - Specific query
  exit: 0

defn run(query):
  when query.in(['exit' 'quit' 'q' 'Q']): exit()

  query =: |
    $get-preamble()
    Query:
    ```
    $query
    ```
    $get-postamble()

  print: "$api-model: "
  answer =: groq(query).message()
  say: answer.format()


#------------------------------------------------------------------------------
# Groq API functions
#------------------------------------------------------------------------------
defn groq(query):
  api-url =: ENV.YAMLLM_GROQ_API_URL ||
    'https://api.groq.com/openai/v1/chat/completions'

  request =::
    :headers:
      :Content-Type: application/json
      :Authorization:: "Bearer $api-key"
    :body::
      json/dump::
        :messages:
        - :role: user
          :content:: query
        :model:: api-model
        :temperature:: (ENV.YAMLLM_TEMP || 0.8).num()
        # XXX _ not allowed in YS keywords yet.
        ! keyword('top_p'):: (ENV.YAMLLM_TOPP || 1.0).num()

  response =:
    try:
      http/post api-url: request
      catch e:
        e =: ex-data(e)
        say:
          yaml/dump::
            status:: e.status
            body:: e.body.json/load()
            api-key:: api-key
        exit: 1

  when ENV.YAMLLM_DEBUG:
    say: response.yaml/dump()

  when (response.status != 200):
    die(response)

  json/load: response.body

defn message(response):
  =>: response.choices.0.message.content


#------------------------------------------------------------------------------
# Helper functions
#------------------------------------------------------------------------------
defn get-query():
  loop:
    print: "Q: "
    q =: read-line()
    # ctl-d returns nil to exit:
    when q.nil?(): exit()
    if q.empty?(): recur() q

defn get-preamble():
  when-let [file ENV.YAMLLM_PREAMBLE_FILE]: slurp(file)

defn get-postamble():
  when-let [file ENV.YAMLLM_POSTAMBLE_FILE]: slurp(file)

defn format(string):
  string .=: triml().prettier().trimr()

  if (string =~ /\n/):
    +"\n$string"
    string

defn prettier(s):
  if sh('which prettier').out.empty?():
    then: s
    else:
      cmd =:: prettier --stdin-filepath=x.md
                       --print-width=80
                       --prose-wrap=always
      =>: sh(cmd {:in s}).out

# vim: sw=2 ft=yaml lisp:
